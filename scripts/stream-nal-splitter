#!/usr/bin/env node

const Splitter = require('stream-split');
const createReadStreamHandler = require('../lib/read-stream-handler');
const createWriteStreamHandler = require('../lib/write-stream-handler');

const argv = require('optimist')
    .usage('Adds NAL units to the input stream, writes to output stream\nUsage: $0')
    .options('i', {
      alias : 'input',
      describe: 'Input file',
      demand: true,
    })
    .options('o', {
      alias : 'output',
      describe: 'Output file',
      demand: true,
    })
    .argv;


const source = argv.input;
const target = argv.output;

const NALseparator = new Buffer.from([0,0,0,1]);

let writeStream;
let processedStream;

const onWriteOpen = (stream) => {
  console.log(`writing output to ${target}`);
  writeStream = stream;
};
const onWriteClose = (stream) => {
  console.log(`consumer of "${target}" disconnected`);
}
createWriteStreamHandler({ target, onOpen: onWriteOpen, onClose: onWriteClose });


const onReadOpen = (stream) => {
  console.log(`initialising input stream from ${source}`);
  processedStream = stream.pipe(new Splitter(NALseparator));

  processedStream.on('data', (data) => {
    writeStream.write(Buffer.concat([NALseparator, data]));
  });
};

const onReadClose = () => {
  console.log('input stream closed');
  processedStream.destroy();
};

createReadStreamHandler({ source, onOpen: onReadOpen, onClose: onReadClose });

