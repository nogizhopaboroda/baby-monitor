#!/usr/bin/env node

const createReadStreamHandler = require('../lib/read-stream-handler');
const createWriteStreamHandler = require('../lib/write-stream-handler');

const argv = require('optimist')
    .usage('Distributes input stream to multiple output streams\nUsage: $0')
    .options('i', {
      alias : 'input',
      describe: 'Input file',
      demand: true,
    })
    .options('o', {
      alias : 'output',
      describe: 'Output file',
      demand: true,
    })
    .argv;


console.log('initialising');

const source = argv.input;
const targets = [].concat(argv.output);

const writeStreams = {};

targets.forEach((target) => {
  const onOpen = (stream) => {
    console.log(`creating stream: ${source} -> ${target}`);
    writeStreams[target] = stream;
  };
  const onClose = (stream) => {
    console.log(`consumer of "${target}" disconnected`);
  }
  createWriteStreamHandler({ target, onOpen, onClose });
});

const onData = (data) => {
  Object.values(writeStreams).forEach((stream) => stream.write(data));
};

const onOpen = () => {
  console.log(`initialising input stream from ${source}`);
};

const onClose = () => {
  console.log('input stream closed');
};

createReadStreamHandler({ source, onOpen, onData, onClose });
