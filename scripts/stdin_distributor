#!/usr/bin/env node

const fs = require('fs');
const createReadableStreamHandler = require('../lib/read-stream-handler');

const argv = require('optimist')
    .usage('Distributes input stream to multiple output streams\nUsage: $0')
    .options('i', {
      alias : 'input',
      describe: 'Input file',
      demand: true,
    })
    .options('o', {
      alias : 'output',
      describe: 'Output file',
      demand: true,
    })
    .argv;


console.log('initialising');

const source = argv.input;
const targets = [].concat(argv.output);

const writeStreams = {};

const duplicateStream = (fileName) => {
  console.log(`creating stream: ${source} -> ${fileName}`);
  const writeStream = fs.createWriteStream(fileName);

  writeStreams[fileName] = writeStream;

  writeStream.on('error', (e) => {
    console.log(`consumer of "${fileName}" disconnected`);
    writeStream.destroy();
    duplicateStream(fileName);
  });
}

targets.forEach(duplicateStream);

const onData = (data) => {
  Object.values(writeStreams).forEach((stream) => stream.write(data));
};

const onClose = () => {
  console.log('reinitialising stream');
};

createReadableStreamHandler({ source, onData, onClose });
